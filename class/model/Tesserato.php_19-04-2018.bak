<?php
if (!defined("_BASE_DIR_")) exit();
include_model('Modello','ModelFactory','Grado','Qualifica');

class Tesserato extends Modello {
	
	private $tipi = NULL;
	private $qualifiche = NULL;
	private $mod_qual = false;
	private $tessera = false;
	
	/**
	 * @param integer $id
	 * @return Tesserato
	 */
	public static function fromId($id) {
		return ModelFactory::get(__CLASS__)->fromId($id);
	}
	
	/**
	 * Restituisce i tesserati associati ad una società
	 * @param integer $idsoc
	 * @return Tesserato[]
	 */
	public static function getInSocieta($idsoc) {
		$db = Database::get();
		return ModelFactory::listaSql('Tesserato', $db->select('tesserati',"idsocieta='$idsoc'"));
	}
	
	/**
	 * Restituisce i tesserati con un pagamento pagato di una società 
	 * @param int $idsoc
	 * @return Tesserato[]
	 */
	public static function getRinnovati($idsoc) {
		$db = Database::get();
		$rs = $db->select('pagamenti_correnti',"idsocieta='$idsoc' AND idtesserato IS NOT NULL AND data_pagamento IS NOT NULL","idtesserato");
		
		$ar_idt = array();
		
		while($row = $rs->fetch_assoc())
			$ar_idt[] = $row['idtesserato'];
		
		return ModelFactory::lista('Tesserato', $ar_idt);
	}
	
	/**
	 * Restituisce i tesserati con un pagamento pagato di una società per l'anno prossimo
	 * @param int $idsoc
	 * @return Tesserato[]
	 */
	public static function getRinnovatiProssimoAnno($idsoc) {
		$anno = DataUtil::get()->oggi()->getAnno();
		$anno++;
		$data = $anno."-12-31";
		$db = Database::get();
		$rs = $db->select('pagamenti_correnti',"idsocieta='$idsoc' AND idtesserato IS NOT NULL AND data_pagamento IS NOT NULL AND scadenza='$data'","idtesserato");
	
		$ar_idt = array();
	
		while($row = $rs->fetch_assoc())
			$ar_idt[] = $row['idtesserato'];
	
		return ModelFactory::lista('Tesserato', $ar_idt);
	}
	
	/**
	 * Restituisce i tesserati con un pagamento pagato di un tipo
	 * @param int $idtipo
	 * @return Tesserato[]
	 */
	public static function getRinnovatiTipo($idtipo) {
		$db = Database::get();
		$rs = $db->select('pagamenti_correnti',"idtipo='$idtipo' AND idtesserato IS NOT NULL AND data_pagamento IS NOT NULL","idtesserato");
	
		$ar_idt = array();
	
		while($row = $rs->fetch_assoc())
			$ar_idt[] = $row['idtesserato'];
	
		return ModelFactory::lista('Tesserato', $ar_idt);
	}
	
	/**
	 * Restitusice l'elenco dei tesserati che non hanno nessun tipo rinnovato 
	 * @param int $idsoc
	 * @return Tesserato[]
	 */
	public static function getNonRinnovati($idsoc, $fase=NULL) {
		$db = Database::get();
		if($fase == NULL)
		{
			$rs = $db->select('tesserati', "idsocieta='$idsoc' AND idtesserato NOT IN ".
					"(SELECT idtesserato FROM pagamenti_rinnovati WHERE idtesserato IS NOT NULL)");
			return ModelFactory::listaSql('Tesserato', $rs);
		}
		else
		{
			switch ($fase)
			{
				case 1 : $rs = $db->select('tesserati', "idsocieta='$idsoc' AND cognome BETWEEN 'Aaa%' AND 'Bzzz%' AND idtesserato NOT IN ".
					"(SELECT idtesserato FROM pagamenti_rinnovati WHERE idtesserato IS NOT NULL)");
					return ModelFactory::listaSql('Tesserato', $rs);
					break;
					
				case 2 : $rs = $db->select('tesserati', "idsocieta='$idsoc' AND cognome BETWEEN 'Caa%' AND 'Dzzz%' AND idtesserato NOT IN ".
						"(SELECT idtesserato FROM pagamenti_rinnovati WHERE idtesserato IS NOT NULL)");
					return ModelFactory::listaSql('Tesserato', $rs);
					break;
				
				case 3 : $rs = $db->select('tesserati', "idsocieta='$idsoc' AND cognome BETWEEN 'Eaa%' AND 'Izzz%' AND idtesserato NOT IN ".
							"(SELECT idtesserato FROM pagamenti_rinnovati WHERE idtesserato IS NOT NULL)");
					return ModelFactory::listaSql('Tesserato', $rs);
					break;
					
				case 4 : $rs = $db->select('tesserati', "idsocieta='$idsoc' AND cognome BETWEEN 'Jaa%' AND 'Mzzz%' AND idtesserato NOT IN ".
							"(SELECT idtesserato FROM pagamenti_rinnovati WHERE idtesserato IS NOT NULL)");
					return ModelFactory::listaSql('Tesserato', $rs);
					break;
					
				case 5 : $rs = $db->select('tesserati', "idsocieta='$idsoc' AND cognome BETWEEN 'Naa%' AND 'Rzzz%' AND idtesserato NOT IN ".
							"(SELECT idtesserato FROM pagamenti_rinnovati WHERE idtesserato IS NOT NULL)");
					return ModelFactory::listaSql('Tesserato', $rs);
					break;
					
				case 6 : $rs = $db->select('tesserati', "idsocieta='$idsoc' AND cognome BETWEEN 'Saa%' AND 'Zzzz%' AND idtesserato NOT IN ".
							"(SELECT idtesserato FROM pagamenti_rinnovati WHERE idtesserato IS NOT NULL)");
					return ModelFactory::listaSql('Tesserato', $rs);
					break;
			}
		}
	}
	
	/**
	 * Restitusice l'elenco dei tesserati che non hanno nessun pagamento dei tipi non scaduto 
	 * @param int $idsoc
	 * @return Tesserato[]
	 */
	public static function getNonAttivi($idsoc, $fase=NULL) {
		$db = Database::get();
		if($fase === NULL)
		{
		$rs = $db->select('tesserati', "idsocieta='$idsoc' AND idtesserato NOT IN ".
				"(SELECT idtesserato FROM pagamenti_correnti WHERE idtesserato IS NOT NULL)");
		return ModelFactory::listaSql('Tesserato', $rs);
		}
		else 
		{
			switch ($fase)
			{
				case 1 : $rs = $db->select('tesserati', "idsocieta='$idsoc' AND cognome BETWEEN 'Aaa%' AND 'Bzzz%' AND idtesserato NOT IN ".
						"(SELECT idtesserato FROM pagamenti_correnti WHERE idtesserato IS NOT NULL)");
				return ModelFactory::listaSql('Tesserato', $rs);
				break;
					
				case 2 : $rs = $db->select('tesserati', "idsocieta='$idsoc' AND cognome BETWEEN 'Caa%' AND 'Dzzz%' AND idtesserato NOT IN ".
						"(SELECT idtesserato FROM pagamenti_correnti WHERE idtesserato IS NOT NULL)");
				return ModelFactory::listaSql('Tesserato', $rs);
				break;
			
				case 3 : $rs = $db->select('tesserati', "idsocieta='$idsoc' AND cognome BETWEEN 'Eaa%' AND 'Izzz%' AND idtesserato NOT IN ".
						"(SELECT idtesserato FROM pagamenti_correnti WHERE idtesserato IS NOT NULL)");
				return ModelFactory::listaSql('Tesserato', $rs);
				break;
					
				case 4 : $rs = $db->select('tesserati', "idsocieta='$idsoc' AND cognome BETWEEN 'Jaa%' AND 'Mzzz%' AND idtesserato NOT IN ".
						"(SELECT idtesserato FROM pagamenti_correnti WHERE idtesserato IS NOT NULL)");
				return ModelFactory::listaSql('Tesserato', $rs);
				break;
					
				case 5 : $rs = $db->select('tesserati', "idsocieta='$idsoc' AND cognome BETWEEN 'Naa%' AND 'Rzzz%' AND idtesserato NOT IN ".
						"(SELECT idtesserato FROM pagamenti_correnti WHERE idtesserato IS NOT NULL)");
				return ModelFactory::listaSql('Tesserato', $rs);
				break;
					
				case 6 : $rs = $db->select('tesserati', "idsocieta='$idsoc' AND cognome BETWEEN 'Saa%' AND 'Zzzz%' AND idtesserato NOT IN ".
						"(SELECT idtesserato FROM pagamenti_correnti WHERE idtesserato IS NOT NULL)");
				return ModelFactory::listaSql('Tesserato', $rs);
				break;
			}
		}
	}
	
	/**
	 * Confronta i tesserati in base a Cognome, Nome
	 * @param Tesserato $ta
	 * @param Tesserato $tb
	 */
	public static function compare($ta, $tb)
	{
		$rc = strcasecmp($ta->getCognome(), $tb->getCognome());
		
		if($rc != 0)
			return $rc;
		
		return strcasecmp($ta->getNome(), $tb->getNome());
	}
	
	public function __construct($id=NULL) {
		parent::__construct('tesserati', 'idtesserato', $id);
	}
	
	public function __toStringConsiglio() {
		return ucwords(strtolower($this->getNome()." ".$this->getCognome()));
	}
	
	/**
	 * Verifica se il tesserato ha o meno il codice fiscale
	 * @return boolean
	 */
	public function haCodiceFiscale()
	{
		$cf = $this->getCodiceFiscale();
		if($cf === NULL || $cf == '')
			return false;
		else 
			return true;
	}
	
	/**
	 * Numero tessera o NULL se ancora non è tesserato
	 * @return int
	 */
	public function getNumTessera() {
		if ($this->tessera === false) {
			if ($this->haId()) {
				include_model('Assicurazione');
				$this->tessera = AssicurazioneUtil::get()->getTesseraAttuale($this->getId());
			} else
				$this->tessera = NULL;
		}
		return $this->tessera;
	}

	/**
	 * Id della società di appartenenza
	 * @return int
	 */
	public function getIDSocieta() {
		return $this->get('idsocieta');
	}

	/**
	 * Restituisce il cognome
	 * @return string
	 */
	public function getCognome() {
		return $this->get('cognome');
	}

	/**
	 * Restituisce il nome
	 * @return string
	 */
	public function getNome() {
		return $this->get('nome');
	}

	/**
	 * Restituisce il sesso
	 * @return int
	 */
	public function getSesso() {
		return $this->get('sesso');
	}

	/**
	 * Restituisce la data di nascita
	 * @return Data
	 */
	public function getDataNascita() {
		return $this->getData('data_nascita');
	}

	/**
	 * Restituisce il luogo di nascita
	 * @return string
	 */
	public function getLuogoNascita() {
		return $this->get('luogo_nascita');
	}

	/**
	 * Restituisce l'id della provincia di nascita
	 * @return int
	 */
	public function getIDProvincia() {
		return $this->get('prov_nascita');
	}

	/**
	 * Restituisce il codice di cittadinanza
	 * @return string
	 */
	public function getCittadinanza() {
		return $this->get('cittadinanza');
	}

	/**
	 * Restituisce il codice fiscale
	 * @return string
	 */
	public function getCodiceFiscale() {
		return $this->get('codice_fiscale');
	}

	/**
	 * Verifica la correttezza del codice fiscale
	 * @return boolean
	 */
	public function verificaCodiceFiscale() {
		if (!class_exists('CodiceFiscale')) include_class('CodiceFiscale');
		return CodiceFiscale::verifica($this);
	}

	/**
	 * Restituisce il numero di telefono fisso
	 * @return string
	 */
	public function getTelefono() {
		return $this->get('tel');
	}

	/**
	 * Restituisce il numero di cellulare
	 * @return string
	 */
	public function getCellulare() {
		return $this->get('cell');
	}

	/**
	 * Restituisce l'email
	 * @return string
	 */
	public function getEmail() {
		return $this->get('email');
	}
	
	/**
	 * Restituisce la qualifica del tesserato dato un tipo, se presente 
	 * @param integer $idtipo
	 * @return Qualifica
	 */
	public function getQualificaTipo($idtipo) {
		$q = $this->getQualifiche();
		if(isset($q[$idtipo]))
			return $q[$idtipo];
		else
			return NULL;
	}
	
	/**
	 * Restituisce le qualifiche del tesserato per le quali esiste un pagamento non scaduto
	 * @return Qualifica[]
	 */
	public function getQualifiche() {
		if($this->qualifiche === NULL)
		{
			if($this->haId())
				$this->qualifiche = Qualifica::getListaAttive($this);
			else $this->qualifiche = array();
		}
		return $this->qualifiche;
	}
	
	/**
	 * Restituisce le ultime qualifiche salvate
	 * @return Qualifica[] formato id tipo => Qualifica 
	 */
	public function getQualificheUltime() {
		return Qualifica::getListaUltime($this); 
	}
	
	/**
	 * Restituisce un array con gli ID dei tipi del tesserato
	 * @return array
	 * @deprecated
	 */
	public function getIDTipi() {//TODO va tolta?
		if($this->tipi === NULL) {
			if($this->getId() === NULL) return array();
			$idt = $this->getId();
			$rq = Database::get()->select('tipi_tesserati',"idtesserato = '$idt'",'idtipo');
			$this->tipi = array();
			
			while ($row = $rq->fetch_row())
			{
				$this->tipi[] = $row[0];
			}
		}
		
		return $this->tipi;
	}
	
	/**
	 * 
	 * @return Grado[]
	 * @deprecated
	 */
	public function getGradi() {//TODO va tolta?
		if(!$this->haId()) return array();
		$idt = $this->getId();
		$sql = Database::get()->select('tipi_tesserati t INNER JOIN gradi g on t.idgrado=g.idgrado',
				"idtesserato='$idt'",'g.*'); 
		return ModelFactory::listaSql('Grado', $sql);
	}
		
	/**
	 * Imposta il numero tessera
	 * @param int $val
	 */
	public function setNumTessera($val) {
		$this->set('n_tessera', $val);
	}

	/**
	 * Imposta l'id della società di appartenenza
	 * @param int $val
	 */
	public function setIDSocieta($val) {
		$this->set('idsocieta', $val);
	}

	/**
	 * Imposta il cognome
	 * @param string $val
	 */
	public function setCognome($val) {
		$this->set('cognome', $val);
	}

	/**
	 * Imposta il nome
	 * @param string $val
	 */
	public function setNome($val) {
		$this->set('nome', $val);
	}

	/**
	 * Imposta il sesso
	 * @param int $val
	 */
	public function setSesso($val) {
		$this->set('sesso', $val);
	}

	/**
	 * Imposta la data di nascita
	 * @param Data $val
	 */
	public function setDataNascita($val) {
		return $this->setData('data_nascita',$val);
	}

	/**
	 * Imposta il luogo di nascita
	 * @param string $val
	 */
	public function setLuogoNascita($val) {
		$this->set('luogo_nascita', $val);
	}

	/**
	 * Imposta l'id della provincia di nascita
	 * @param int $val
	 */
	public function setIDProvincia($val) {
		$this->set('prov_nascita', $val);
	}

	/**
	 * Imposta il codice di cittadinanza
	 * @param string $val
	 */
	public function setCittadinanza($val) {
		$this->set('cittadinanza', $val);
	}

	/**
	 * Imposta il codice fiscale
	 * @param string $val
	 */
	public function setCodiceFiscale($val) {
		$this->set('codice_fiscale', $val);
	}

	/**
	 * Imposta il numero di telefono fisso
	 * @param string $val
	 */
	public function setTelefono($val) {
		$this->set('tel', $val);
	}

	/**
	 * Imposta il numero di cellulare
	 * @param string $val
	 */
	public function setCellulare($val) {
		$this->set('cell', $val);
	}

	/**
	 * Imposta l'email
	 * @param string $val
	 */
	public function setEmail($val) {
		$this->set('email', $val);
	}
	

	/**
	 * Restituisce l'indirizzo di residenza
	 * @return string 
	 */
	public function getIndirizzo() {
		return $this->get('indirizzo');
	}

	/**
	 * Imposta l'indirizzo di residenza
	 * @param string $val
	 */
	public function setIndirizzo($val) {
		$this->set('indirizzo', $val);
	}


	/**
	 * Restituisce il CAP di residenza
	 * @return string 
	 */
	public function getCap() {
		return $this->get('cap');
	}

	/**
	 * Imposta il CAP di residenza
	 * @param string $val
	 */
	public function setCap($val) {
		$this->set('cap', $val);
	}


	/**
	 * Restituisce la città di residenza
	 * @return string 
	 */
	public function getCittaRes() {
		return $this->get('citta_res');
	}

	/**
	 * Imposta la città di residenza
	 * @param string $val
	 */
	public function setCittaRes($val) {
		$this->set('citta_res', $val);
	}


	/**
	 * Restituisce l'ID della provincia di residenza
	 * @return int 
	 */
	public function getIDProvinciaRes() {
		return $this->get('prov_res');
	}

	/**
	 * Imposta l'ID della provincia di residenza
	 * @param int $val
	 */
	public function setIDProvinciaRes($val) {
		$this->set('prov_res', $val);
	}
	
	/**
	 * Inserisce al tesserato la qualifica
	 * @param integer $idtipo
	 * @param integer $idgrado
	 */
	public function setQualifica($idtipo, $idgrado) {
		$ql = $this->getQualifiche();
		
		if(isset($ql[$idtipo]))
		{
			$q = $ql[$idtipo];
			if($q->getIdGrado()!=$idgrado) 
			{
				$this->mod_qual=true;
				$q->setIdGrado($idgrado);
			}
		}
		else 
		{
			$this->qualifiche[$idtipo] = new Qualifica($this, $idtipo, $idgrado);
			$this->mod_qual = true;
		}
	}
	
	/**
	 * Rimuove al tesserato la qualifica per il tipo passato
	 * @param integer $idtipo
	 */
	public function rimuoviQualifica($idtipo) {
		$ql = $this->getQualifiche();
		
		if(!isset($ql[$idtipo])) return;
		unset($this->qualifiche[$idtipo]);
		$this->mod_qual = true;
	}
	
	public function salva() {
		if(!parent::salva()) 			
			return false;
		$rs = true;
		
		if($this->mod_qual || in_rinnovo())
		{
			$ql = Qualifica::getListaAttive($this);
			//elimina le qualifiche attive nel DB che non sono nel tesserato
			foreach ($ql as $idt=>$q)
			{
				if (!isset($this->qualifiche[$idt]))
					$q->elimina();
			}

			//salva le qualifiche, se presenti
			if ($this->qualifiche !== NULL) {
				foreach ($this->qualifiche as $q)
					$rs &= $q->salva();
			}
					
			if (!$rs) $this->_errore = "Errori nelle qualifiche";
			$this->mod_qual = !$rs;
		} else {
			//salva eventuali dati extra delle qualifiche
			foreach ($this->qualifiche as $q)
				$rs &= $q->salvaExtra();
		}
		return $rs;
	}

}

class TesseratoUtil {
	private static $inst = NULL;
	
	/**
	 * @return TesseratoUtil 
	 */
	public static function get() {
		if (self::$inst === NULL) self::$inst = new TesseratoUtil();
		return self::$inst;
	}
	
	/**
	 * Cerca un tesserato in base alla societa e al cognome, nome e data di nascita
	 * @param int $ids
	 * @param string $cognome
	 * @param string $nome
	 * @param Data $nascita
	 * @return Tesserato o NULL se il tesserato non esiste 
	 */
	public function cerca($ids=NULL, $cognome, $nome, $nascita) {
		$db = Database::get();
		$cognome = $db->quoteLike($cognome);
		$nome = $db->quoteLike($nome);
		$nascita = $nascita->toSQL();
		
		if($ids === NULL)
			$rs = Database::get()->select('tesserati',
				"cognome LIKE '$cognome' AND nome LIKE '$nome' AND data_nascita = '$nascita'");
		else 
			$rs = Database::get()->select('tesserati',
				"idsocieta = '$ids' AND cognome LIKE '$cognome' AND nome LIKE '$nome' AND data_nascita = '$nascita'");
		$row = $rs->fetch_assoc();
		if ($row === NULL) return NULL;
		return Modello::_creaConDati('Tesserato', $row);
	}
	
	/**
	 * Restituisce i tesserati di una società che hanno un pagamento (pagato o meno)
	 * @param int $idsoc
	 * @param int $anno [opz] se impostato, restituisce solo i tesserati attivi in un certo anno
	 * @return Tesserato[]
	 */
	public function getAttivi($idsoc, $anno=NULL) {
		$where = "t.idsocieta = '$idsoc'";
		if ($anno === NULL) {
			$tab = 'pagamenti_correnti';
		} else {
			$tab = 'pagamenti';
			$where .= " AND YEAR(scadenza) >= $anno";
		}
		$rs = Database::get()->select("tesserati t INNER JOIN $tab p USING (idtesserato)", $where, 't.*');
		if ($rs === NULL) echo Database::get()->error(); //DEBUG
		return ModelFactory::listaSql('Tesserato', $rs);
	}
	
	/**
	 * Restituisce gli ultimi $num tesserati ad essere stati inseriti
	 * @param int $num
	 */
	public function getLast($num)
	{
		$db = Database::get();
		$rs = $db->select('tesserati',"1 ORDER BY idtesserato DESC LIMIT $num");
		return ModelFactory::listaSql('Tesserato', $rs);
	}
	
	public function cambiaSocieta($idtesserato, $soc_sorg, $soc_dest)
	{
		$db = Database::get();
		$db->update('tesserati', array('idsocieta'=>$soc_dest),"idtesserato='$idtesserato' AND idsocieta='$soc_sorg'");
	}
}

